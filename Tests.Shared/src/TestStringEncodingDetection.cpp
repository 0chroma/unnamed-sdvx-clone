#include <Shared/Shared.hpp>
#include <Shared/String.hpp>
#include <Tests/Tests.hpp>

/* Common Japanese Text */

// Japanese: 'Iroha' pangram
constexpr char* JA_PANGRAM_UTF8 = "\xe3\x81\x84\xe3\x82\x8d\xe3\x81\xaf\xe3\x81\xab\xe3\x81\xbb\xe3\x81\xb8\xe3\x81\xa9\x20\x2f\x20\xe3\x81\xa1\xe3\x82\x8a\xe3\x81\xac\xe3\x82\x8b\xe3\x82\x92\x20\x2f\x20\xe3\x82\x8f\xe3\x81\x8c\xe3\x82\x88\xe3\x81\x9f\xe3\x82\x8c\xe3\x81\x9e\x20\x2f\x20\xe3\x81\xa4\xe3\x81\xad\xe3\x81\xaa\xe3\x82\x89\xe3\x82\x80\x20\x2f\x20\xe3\x81\x86\xe3\x82\x90\xe3\x81\xae\xe3\x81\x8a\xe3\x81\x8f\xe3\x82\x84\xe3\x81\xbe\x20\x2f\x20\xe3\x81\x91\xe3\x81\xb5\xe3\x81\x93\xe3\x81\x88\xe3\x81\xa6\x20\x2f\x20\xe3\x81\x82\xe3\x81\x95\xe3\x81\x8d\xe3\x82\x86\xe3\x82\x81\xe3\x81\xbf\xe3\x81\x98\x20\x2f\x20\xe3\x82\x91\xe3\x81\xb2\xe3\x82\x82\xe3\x81\x9b\xe3\x81\x9a";
constexpr char* JA_PANGRAM_SHIFTJIS = "\x82\xa2\x82\xeb\x82\xcd\x82\xc9\x82\xd9\x82\xd6\x82\xc7\x20\x2f\x20\x82\xbf\x82\xe8\x82\xca\x82\xe9\x82\xf0\x20\x2f\x20\x82\xed\x82\xaa\x82\xe6\x82\xbd\x82\xea\x82\xbc\x20\x2f\x20\x82\xc2\x82\xcb\x82\xc8\x82\xe7\x82\xde\x20\x2f\x20\x82\xa4\x82\xee\x82\xcc\x82\xa8\x82\xad\x82\xe2\x82\xdc\x20\x2f\x20\x82\xaf\x82\xd3\x82\xb1\x82\xa6\x82\xc4\x20\x2f\x20\x82\xa0\x82\xb3\x82\xab\x82\xe4\x82\xdf\x82\xdd\x82\xb6\x20\x2f\x20\x82\xef\x82\xd0\x82\xe0\x82\xb9\x82\xb8";
constexpr char* JA_PANGRAM_CP949 = "\xaa\xa4\xaa\xed\xaa\xcf\xaa\xcb\xaa\xdb\xaa\xd8\xaa\xc9\x20\x2f\x20\xaa\xc1\xaa\xea\xaa\xcc\xaa\xeb\xaa\xf2\x20\x2f\x20\xaa\xef\xaa\xac\xaa\xe8\xaa\xbf\xaa\xec\xaa\xbe\x20\x2f\x20\xaa\xc4\xaa\xcd\xaa\xca\xaa\xe9\xaa\xe0\x20\x2f\x20\xaa\xa6\xaa\xf0\xaa\xce\xaa\xaa\xaa\xaf\xaa\xe4\xaa\xde\x20\x2f\x20\xaa\xb1\xaa\xd5\xaa\xb3\xaa\xa8\xaa\xc6\x20\x2f\x20\xaa\xa2\xaa\xb5\xaa\xad\xaa\xe6\xaa\xe1\xaa\xdf\xaa\xb8\x20\x2f\x20\xaa\xf1\xaa\xd2\xaa\xe2\xaa\xbb\xaa\xba";

/* Common Korean Text */

// Korean: 'Innate requisite of kiss' pangram
constexpr char* KO_PANGRAM_UTF8 = "\xed\x82\xa4\xec\x8a\xa4\xec\x9d\x98\x20\xea\xb3\xa0\xec\x9c\xa0\x20\xec\xa1\xb0\xea\xb1\xb4\xec\x9d\x80\x20\xec\x9e\x85\xec\x88\xa0\xeb\x81\xbc\xeb\xa6\xac\x20\xeb\xa7\x8c\xeb\x82\x98\xec\x95\xbc\x20\xed\x95\x98\xea\xb3\xa0\x20\xed\x8a\xb9\xeb\xb3\x84\xed\x95\x9c\x20\xea\xb8\xb0\xec\x88\xa0\xec\x9d\x80\x20\xed\x95\x84\xec\x9a\x94\xec\xb9\x98\x20\xec\x95\x8a\xeb\x8b\xa4\x2e";
constexpr char* KO_PANGRAM_CP949 = "\xc5\xb0\xbd\xba\xc0\xc7\x20\xb0\xed\xc0\xaf\x20\xc1\xb6\xb0\xc7\xc0\xba\x20\xc0\xd4\xbc\xfa\xb3\xa2\xb8\xae\x20\xb8\xb8\xb3\xaa\xbe\xdf\x20\xc7\xcf\xb0\xed\x20\xc6\xaf\xba\xb0\xc7\xd1\x20\xb1\xe2\xbc\xfa\xc0\xba\x20\xc7\xca\xbf\xe4\xc4\xa1\x20\xbe\xca\xb4\xd9\x2e";

// Korean: 'Jeep car' string, which can't be represented by EUC-KR
constexpr char* KO_JEEP_UTF8 = "\xec\xb0\xa6\xec\xb0\xa8\xeb\xa5\xbc\x20\xed\x83\x80\xea\xb3\xa0\x20\xec\x98\xa8\x20\xed\x8e\xb2\xec\x8b\x9c\xeb\xa7\xa8\xea\xb3\xbc\x20\xec\x91\x9b\xeb\x8b\xa4\xeb\xa6\xac\x20\xeb\x98\xa0\xeb\xb0\xa9\xea\xb0\x81\xed\x95\x98";
constexpr char* KO_JEEP_CP949 = "\xaa\x42\xc2\xf7\xb8\xa6\x20\xc5\xb8\xb0\xed\x20\xbf\xc2\x20\xbc\x84\xbd\xc3\xb8\xc7\xb0\xfa\x20\x9c\xba\xb4\xd9\xb8\xae\x20\x8c\x63\xb9\xe6\xb0\xa2\xc7\xcf";

/* Some Examples from Nautica */

// Chart: c8232a20-8e7b-11ea-9d73-c3bee55888a3
constexpr char* KSM_NERIJO_UTF8 = "\xe7\x85\x89\xe6\x83\x85\xe3\x83\x9f\xe3\x82\xb9\xe3\x83\x86\xe3\x82\xa3\xe3\x83\x95\xe3\x82\xa3\xe3\x83\xaa\xe3\x82\xa2";
constexpr char* KSM_NERIJO_SHIFTJIS = "\x97\xf9\x8f\xee\x83\x7e\x83\x58\x83\x65\x83\x42\x83\x74\x83\x42\x83\x8a\x83\x41";
constexpr char* KSM_NERIJO_CP949 = "\xd6\xa1\xef\xd7\xab\xdf\xab\xb9\xab\xc6\xab\xa3\xab\xd5\xab\xa3\xab\xea\xab\xa2";

static inline bool IsUTF8Like(Utility::StringEncoding encoding)
{
	return encoding == Utility::StringEncoding::Unknown ||
		encoding == Utility::StringEncoding::UTF8;
}

Test("DetectEncoding.UTF8")
{
	char* testCases[] = {
		"",
		"\r\n-- Test Data--\r\n@@\r\n",
		"The quick brown fox jumps over the lazy dog",
		"\xEF\xBB\xBF",
		JA_PANGRAM_UTF8,
		KO_PANGRAM_UTF8,
		KO_JEEP_UTF8,
		KSM_NERIJO_UTF8,
	};

	for (char* testCase : testCases)
	{
		TestEnsure(IsUTF8Like(Utility::DetectEncoding(testCase)));
	}
}

Test("DetectEncoding.ShiftJIS")
{
	char* testCases[] = {
		JA_PANGRAM_SHIFTJIS,
		KSM_NERIJO_SHIFTJIS,
	};

	for (char* testCase : testCases)
	{
		TestEnsure(Utility::DetectEncoding(testCase) == Utility::StringEncoding::ShiftJIS);
	}
}

Test("DetectEncoding.CP949")
{
	char* testCases[] = {
		JA_PANGRAM_CP949,
		KO_PANGRAM_CP949,
		KO_JEEP_CP949,
		KSM_NERIJO_CP949,
	};

	for (char* testCase : testCases)
	{
		TestEnsure(Utility::DetectEncoding(testCase) == Utility::StringEncoding::CP949);
	}
}